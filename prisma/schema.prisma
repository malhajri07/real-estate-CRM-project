/**
 * schema.prisma - Database Schema Definition
 * 
 * This file defines the complete database schema for the real estate CRM platform.
 * It includes:
 * - User roles and permissions (RBAC system)
 * - Property and listing management
 * - Organization and agent management
 * - Lead and claim workflow
 * - Audit logging and security
 * - File and media management
 * 
 * The schema is designed for SQLite in development and can be adapted for PostgreSQL
 * in production. All array and JSON fields are stored as strings for SQLite compatibility.
 * 
 * Key Features:
 * - Role-Based Access Control (RBAC) with 6 user roles
 * - Multi-tenant organization support
 * - Comprehensive property and listing management
 * - Lead and claim workflow for buyer pool
 * - Audit logging for security and compliance
 * - File storage and media management
 * 
 * Dependencies: Prisma Client for database operations
 * Pages affected: All pages that interact with the database
 */

// Prisma Client Generator Configuration
generator client {
  provider = "prisma-client-js"
}

// Database Configuration - SQLite for development
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ===== ENUMS - System-wide constants and status values =====

/**
 * UserRole Enum - Role-Based Access Control (RBAC)
 * 
 * Defines the 6 user roles in the system:
 * - WEBSITE_ADMIN: Platform owner with full system access
 * - CORP_OWNER: Corporate account owner/manager
 * - CORP_AGENT: Licensed agent under a corporate organization
 * - INDIV_AGENT: Licensed independent agent (no corporate affiliation)
 * - SELLER: Individual customer selling property
 * - BUYER: Individual customer looking to buy property
 * 
 * Used in: Authentication, authorization, UI routing, data access control
 * Pages affected: All pages with role-based access, RBAC dashboard, user management
 */
enum UserRole {
  WEBSITE_ADMIN
  CORP_OWNER
  CORP_AGENT
  INDIV_AGENT
  SELLER
  BUYER
}

/**
 * OrganizationStatus Enum - Corporate Organization States
 * 
 * Defines the status of corporate organizations:
 * - ACTIVE: Fully operational organization
 * - SUSPENDED: Temporarily disabled organization
 * - PENDING_VERIFICATION: Awaiting verification/approval
 * 
 * Used in: Organization management, access control, billing
 * Pages affected: Agency management, organization settings, admin panel
 */
enum OrganizationStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

/**
 * AgentStatus Enum - Agent Account States
 * 
 * Defines the status of agent accounts:
 * - ACTIVE: Fully operational agent
 * - INACTIVE: Temporarily disabled agent
 * - SUSPENDED: Suspended agent account
 * - PENDING_VERIFICATION: Awaiting license verification
 * 
 * Used in: Agent management, access control, lead assignment
 * Pages affected: Agent profiles, agent management, lead assignment
 */
enum AgentStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

/**
 * PropertyStatus Enum - Property States
 * 
 * Defines the status of properties:
 * - ACTIVE: Available for sale/rent
 * - INACTIVE: Temporarily unavailable
 * - SOLD: Property has been sold
 * - RENTED: Property has been rented
 * - PENDING_APPROVAL: Awaiting approval for listing
 * 
 * Used in: Property management, listing visibility, search filters
 * Pages affected: Property listings, property detail, property management
 */
enum PropertyStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  PENDING_APPROVAL
}

/**
 * ListingType Enum - Property Listing Types
 * 
 * Defines the type of property listing:
 * - RENT: Property available for rent
 * - SALE: Property available for sale
 * 
 * Used in: Property search, listing management, pricing
 * Pages affected: Property search, listing creation, property filters
 */
enum ListingType {
  RENT
  SALE
}

/**
 * ListingStatus Enum - Listing States
 * 
 * Defines the status of property listings:
 * - ACTIVE: Listing is live and visible
 * - INACTIVE: Listing is hidden
 * - EXPIRED: Listing has expired
 * - PENDING_APPROVAL: Awaiting approval
 * 
 * Used in: Listing management, visibility control, moderation
 * Pages affected: Listing management, moderation queue, listing visibility
 */
enum ListingStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  PENDING_APPROVAL
}

enum BuyerRequestStatus {
  OPEN
  CLAIMED
  CLOSED
  PAUSED
}

enum SellerSubmissionStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  PAUSED
}

enum LeadStatus {
  NEW
  IN_PROGRESS
  WON
  LOST
}

enum ClaimStatus {
  ACTIVE
  EXPIRED
  RELEASED
  CONVERTED
}

enum ContactChannel {
  PHONE
  EMAIL
  WHATSAPP
  SMS
  IN_PERSON
}

// Core Models
model User {
  id             String    @id @default(cuid())
  email          String    @unique
  phone          String?   @unique
  firstName      String
  lastName       String
  passwordHash   String
  roles          String // JSON string of UserRole array
  organizationId String?
  isActive       Boolean   @default(true)
  lastLoginAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  agentProfile     AgentProfile?
  properties       Property[]
  listings         Listing[]
  buyerRequests    BuyerRequest[]
  sellerSubmissions SellerSubmission[]
  leads            Lead[]
  claims           Claim[]
  contactLogs      ContactLog[]
  auditLogs        AuditLog[]
  fileAssets       FileAsset[]

  @@index([email])
  @@index([organizationId])
  @@index([isActive])
  @@map("users")
}

model Organization {
  id           String             @id @default(cuid())
  legalName    String
  tradeName    String
  licenseNo    String             @unique
  status       OrganizationStatus @default(PENDING_VERIFICATION)
  address      String?
  phone        String?
  email        String?
  website      String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relations
  users        User[]
  agentProfiles AgentProfile[]
  properties   Property[]
  listings     Listing[]
  fileAssets   FileAsset[]

  @@index([licenseNo])
  @@index([status])
  @@map("organizations")
}

model AgentProfile {
  id                String      @id @default(cuid())
  userId            String      @unique
  organizationId    String?
  licenseNo         String      @unique
  licenseValidTo    DateTime
  territories       String      // JSON string of city/district codes array
  isIndividualAgent Boolean     @default(false)
  status            AgentStatus @default(PENDING_VERIFICATION)
  specialties       String      // JSON string of property types array
  experience        Int?        // Years of experience
  bio               String?
  avatar            String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  user         User        @relation(fields: [userId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@index([userId])
  @@index([organizationId])
  @@index([licenseNo])
  @@index([status])
  @@map("agent_profiles")
}

model Property {
  id              String        @id @default(cuid())
  agentId         String
  organizationId  String?
  title           String
  description     String
  type            String        // e.g., "شقة", "فيلا", "دوبلكس"
  category        String        // e.g., "سكني", "تجاري"
  city            String
  district        String?
  address         String
  bedrooms        Int?
  bathrooms       Decimal?
  areaSqm         Decimal?
  price           Decimal
  status          PropertyStatus @default(ACTIVE)
  visibility      String        @default("public") // public, private, organization
  latitude        Decimal?
  longitude       Decimal?
  features        String        // JSON string of features array
  photos          String        // JSON string of photo URLs array
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  agent        User        @relation(fields: [agentId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])
  listings     Listing[]

  @@index([agentId])
  @@index([organizationId])
  @@index([city])
  @@index([status])
  @@index([type])
  @@index([price])
  @@map("properties")
}

model Listing {
  id          String        @id @default(cuid())
  propertyId  String
  agentId     String
  organizationId String?
  listingType ListingType
  exclusive   Boolean       @default(false)
  publishedAt DateTime?
  status      ListingStatus @default(ACTIVE)
  price       Decimal?
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  property    Property     @relation(fields: [propertyId], references: [id])
  agent       User         @relation(fields: [agentId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@index([propertyId])
  @@index([agentId])
  @@index([organizationId])
  @@index([status])
  @@index([listingType])
  @@map("listings")
}

model BuyerRequest {
  id                  String             @id @default(cuid())
  createdByUserId     String
  city                String
  type                String
  minBedrooms         Int?
  maxBedrooms         Int?
  minPrice            Decimal?
  maxPrice            Decimal?
  contactPreferences  String             // JSON string of contact preferences
  status              BuyerRequestStatus @default(OPEN)
  maskedContact       String             // JSON string of masked contact
  fullContactJson     String             // JSON string of full contact details (encrypted)
  multiAgentAllowed   Boolean            @default(false)
  notes               String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt

  // Relations
  createdBy   User   @relation(fields: [createdByUserId], references: [id])
  leads       Lead[]
  claims      Claim[]

  @@index([createdByUserId])
  @@index([city])
  @@index([status])
  @@index([type])
  @@index([maxPrice])
  @@map("buyer_requests")
}

model SellerSubmission {
  id                  String               @id @default(cuid())
  createdByUserId     String
  city                String
  type                String
  bedrooms            Int?
  priceExpectation    Decimal?
  exclusivePreference Boolean              @default(false)
  status              SellerSubmissionStatus @default(OPEN)
  maskedContact       String               // JSON string of masked contact
  fullContactJson     String               // JSON string of full contact details (encrypted)
  notes               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  // Relations
  createdBy User @relation(fields: [createdByUserId], references: [id])
  leads     Lead[]

  @@index([createdByUserId])
  @@index([city])
  @@index([status])
  @@index([type])
  @@map("seller_submissions")
}

model Lead {
  id                  String     @id @default(cuid())
  agentId             String
  buyerRequestId      String?
  sellerSubmissionId  String?
  status              LeadStatus @default(NEW)
  notes               String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Relations
  agent           User            @relation(fields: [agentId], references: [id])
  buyerRequest    BuyerRequest?   @relation(fields: [buyerRequestId], references: [id])
  sellerSubmission SellerSubmission? @relation(fields: [sellerSubmissionId], references: [id])
  contactLogs     ContactLog[]

  @@index([agentId])
  @@index([buyerRequestId])
  @@index([sellerSubmissionId])
  @@index([status])
  @@map("leads")
}

model Claim {
  id             String      @id @default(cuid())
  agentId        String
  buyerRequestId String
  claimedAt      DateTime    @default(now())
  expiresAt      DateTime
  status         ClaimStatus @default(ACTIVE)
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // Relations
  agent        User         @relation(fields: [agentId], references: [id])
  buyerRequest BuyerRequest @relation(fields: [buyerRequestId], references: [id])

  @@index([agentId])
  @@index([buyerRequestId])
  @@index([status])
  @@index([expiresAt])
  @@map("claims")
}

model ContactLog {
  id        String         @id @default(cuid())
  leadId    String
  agentId   String
  note      String
  channel   ContactChannel
  contactedAt DateTime     @default(now())
  createdAt DateTime       @default(now())

  // Relations
  lead Lead @relation(fields: [leadId], references: [id])
  agent User @relation(fields: [agentId], references: [id])

  @@index([leadId])
  @@index([agentId])
  @@index([contactedAt])
  @@map("contact_logs")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String   // e.g., "CREATE", "UPDATE", "DELETE", "CLAIM", "RELEASE"
  entity    String   // e.g., "PROPERTY", "BUYER_REQUEST", "CLAIM"
  entityId  String
  beforeJson String? // JSON string of previous state
  afterJson  String? // JSON string of new state
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

model FileAsset {
  id             String  @id @default(cuid())
  ownerUserId    String?
  organizationId String?
  entity         String  // e.g., "PROPERTY", "USER", "ORGANIZATION"
  entityId       String
  url            String
  mime           String
  size           Int
  filename       String
  createdAt      DateTime @default(now())

  // Relations
  owner        User?         @relation(fields: [ownerUserId], references: [id])
  organization Organization? @relation(fields: [organizationId], references: [id])

  @@index([ownerUserId])
  @@index([organizationId])
  @@index([entity])
  @@index([entityId])
  @@map("file_assets")
}

// Indexes for performance