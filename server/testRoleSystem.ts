import { storage } from "./storage";
import { createDefaultUserPermissions, UserLevel } from "./authMiddleware";

/**
 * Test script to validate the role-based access control system
 * This script creates test users and validates the multi-tenant architecture
 */

export async function testRoleSystem() {
  console.log("๐ง ุจุฏุก ุงุฎุชุจุงุฑ ูุธุงู ุฅุฏุงุฑุฉ ุงูุฃุฏูุงุฑ ูุงูุตูุงุญูุงุช...");

  try {
    // Create Platform Admin
    const platformAdmin = await storage.createUser({
      firstName: "ูุฏูุฑ",
      lastName: "ุงูููุตุฉ",
      email: "admin@aqaraty.com",
      userLevel: UserLevel.PLATFORM_ADMIN,
      companyName: "ููุตุฉ ุนูุงุฑุงุชู",
      isActive: true,
      subscriptionStatus: "active",
      subscriptionTier: "enterprise",
      maxSeats: 1000,
      usedSeats: 0,
    });
    console.log("โ ุชู ุฅูุดุงุก ูุฏูุฑ ุงูููุตุฉ:", platformAdmin.id);

    // Create permissions for platform admin
    await createDefaultUserPermissions(platformAdmin.id, UserLevel.PLATFORM_ADMIN);
    console.log("โ ุชู ุฅูุดุงุก ุตูุงุญูุงุช ูุฏูุฑ ุงูููุตุฉ");

    // Create Account Owner 1
    const accountOwner1 = await storage.createUser({
      firstName: "ุฃุญูุฏ",
      lastName: "ุงูุฃุญูุฏ",
      email: "ahmed@company1.com",
      userLevel: UserLevel.ACCOUNT_OWNER,
      companyName: "ุดุฑูุฉ ุงูุฃุญูุฏ ุงูุนูุงุฑูุฉ",
      isActive: true,
      subscriptionStatus: "active",
      subscriptionTier: "professional",
      maxSeats: 10,
      usedSeats: 0,
      tenantId: null, // Will be set to their own ID
    });

    // Set tenantId to own ID for account owner
    await storage.upsertUser({
      ...accountOwner1,
      tenantId: accountOwner1.id,
    });
    console.log("โ ุชู ุฅูุดุงุก ูุงูู ุงูุญุณุงุจ ุงูุฃูู:", accountOwner1.id);

    // Create permissions for account owner 1
    await createDefaultUserPermissions(accountOwner1.id, UserLevel.ACCOUNT_OWNER);
    console.log("โ ุชู ุฅูุดุงุก ุตูุงุญูุงุช ูุงูู ุงูุญุณุงุจ ุงูุฃูู");

    // Create Account Owner 2
    const accountOwner2 = await storage.createUser({
      firstName: "ูุงุทูุฉ",
      lastName: "ุงูุณุงูู",
      email: "fatima@company2.com",
      userLevel: UserLevel.ACCOUNT_OWNER,
      companyName: "ูุคุณุณุฉ ุงูุณุงูู ููุนูุงุฑุงุช",
      isActive: true,
      subscriptionStatus: "active",
      subscriptionTier: "business",
      maxSeats: 5,
      usedSeats: 0,
      tenantId: null,
    });

    // Set tenantId to own ID for account owner 2
    await storage.upsertUser({
      ...accountOwner2,
      tenantId: accountOwner2.id,
    });
    console.log("โ ุชู ุฅูุดุงุก ูุงูู ุงูุญุณุงุจ ุงูุซุงูู:", accountOwner2.id);

    // Create permissions for account owner 2
    await createDefaultUserPermissions(accountOwner2.id, UserLevel.ACCOUNT_OWNER);
    console.log("โ ุชู ุฅูุดุงุก ุตูุงุญูุงุช ูุงูู ุงูุญุณุงุจ ุงูุซุงูู");

    // Create Sub-account 1 under Account Owner 1
    const subAccount1 = await storage.createUser({
      firstName: "ูุญูุฏ",
      lastName: "ุงูุฃุญูุฏ",
      email: "mohammed@company1.com",
      userLevel: UserLevel.SUB_ACCOUNT,
      accountOwnerId: accountOwner1.id,
      companyName: accountOwner1.companyName,
      tenantId: accountOwner1.id, // Same tenant as account owner
      isActive: true,
      subscriptionStatus: "active",
      subscriptionTier: accountOwner1.subscriptionTier,
    });
    console.log("โ ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุงููุฑุนู ุงูุฃูู:", subAccount1.id);

    // Create permissions for sub-account 1
    await createDefaultUserPermissions(subAccount1.id, UserLevel.SUB_ACCOUNT);
    console.log("โ ุชู ุฅูุดุงุก ุตูุงุญูุงุช ุงูุญุณุงุจ ุงููุฑุนู ุงูุฃูู");

    // Create Sub-account 2 under Account Owner 2
    const subAccount2 = await storage.createUser({
      firstName: "ุฎุงูุฏ",
      lastName: "ุงูุณุงูู",
      email: "khalid@company2.com",
      userLevel: UserLevel.SUB_ACCOUNT,
      accountOwnerId: accountOwner2.id,
      companyName: accountOwner2.companyName,
      tenantId: accountOwner2.id, // Same tenant as account owner
      isActive: true,
      subscriptionStatus: "active",
      subscriptionTier: accountOwner2.subscriptionTier,
    });
    console.log("โ ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุงููุฑุนู ุงูุซุงูู:", subAccount2.id);

    // Create permissions for sub-account 2
    await createDefaultUserPermissions(subAccount2.id, UserLevel.SUB_ACCOUNT);
    console.log("โ ุชู ุฅูุดุงุก ุตูุงุญูุงุช ุงูุญุณุงุจ ุงููุฑุนู ุงูุซุงูู");

    // Create test data for tenant isolation testing
    // Create leads for Account Owner 1's tenant
    const lead1 = await storage.createLead({
      firstName: "ุนุจุฏุงููู",
      lastName: "ุงููุญูุฏ",
      phone: "0501234567",
      email: "abdullah@email.com",
      interestType: "ุดุฑุงุก",
      status: "ุฌุฏูุฏ",
      budget: 500000,
    }, accountOwner1.id, accountOwner1.id);
    console.log("โ ุชู ุฅูุดุงุก ุนููู ูุญุชูู ูููุคุณุณุฉ ุงูุฃููู");

    // Create leads for Account Owner 2's tenant
    const lead2 = await storage.createLead({
      firstName: "ููุฑุง",
      lastName: "ุงูุฒูุฑุงูู",
      phone: "0507654321",
      email: "nora@email.com",
      interestType: "ุฅูุฌุงุฑ",
      status: "ูุคูู",
      budget: 30000,
    }, accountOwner2.id, accountOwner2.id);
    console.log("โ ุชู ุฅูุดุงุก ุนููู ูุญุชูู ูููุคุณุณุฉ ุงูุซุงููุฉ");

    // Test tenant isolation
    const tenant1Leads = await storage.getAllLeads(accountOwner1.id);
    const tenant2Leads = await storage.getAllLeads(accountOwner2.id);
    const allLeads = await storage.getAllLeads(); // Platform admin view

    console.log("\n๐ ุงุฎุชุจุงุฑ ุนุฒู ุงูุจูุงูุงุช:");
    console.log(`- ุงูุนููุงุก ุงููุญุชูููู ูููุคุณุณุฉ ุงูุฃููู: ${tenant1Leads.length}`);
    console.log(`- ุงูุนููุงุก ุงููุญุชูููู ูููุคุณุณุฉ ุงูุซุงููุฉ: ${tenant2Leads.length}`);
    console.log(`- ุฅุฌูุงูู ุงูุนููุงุก ุงููุญุชูููู (ุฑุคูุฉ ูุฏูุฑ ุงูููุตุฉ): ${allLeads.length}`);

    // Verify tenant isolation is working
    if (tenant1Leads.some(lead => lead.tenantId !== accountOwner1.id)) {
      throw new Error("โ ูุดู ูู ุนุฒู ุงูุจูุงูุงุช ูููุคุณุณุฉ ุงูุฃููู!");
    }

    if (tenant2Leads.some(lead => lead.tenantId !== accountOwner2.id)) {
      throw new Error("โ ูุดู ูู ุนุฒู ุงูุจูุงูุงุช ูููุคุณุณุฉ ุงูุซุงููุฉ!");
    }

    console.log("\n๐ ุชู ุงุฎุชุจุงุฑ ูุธุงู ุฅุฏุงุฑุฉ ุงูุฃุฏูุงุฑ ูุงูุตูุงุญูุงุช ุจูุฌุงุญ!");
    console.log("โ ุนุฒู ุงูุจูุงูุงุช ูุนูู ุจุดูู ุตุญูุญ");
    console.log("โ ุงูุตูุงุญูุงุช ุชู ุฅูุดุงุคูุง ูุฌููุน ุงููุณุชุฎุฏููู");
    console.log("โ ุงููููู ุงููุฑูู ูููุณุชุฎุฏููู ูุนูู ุจุดูู ุตุญูุญ");

    return {
      platformAdmin: platformAdmin.id,
      accountOwner1: accountOwner1.id,
      accountOwner2: accountOwner2.id,
      subAccount1: subAccount1.id,
      subAccount2: subAccount2.id,
    };

  } catch (error) {
    console.error("โ ูุดู ูู ุงุฎุชุจุงุฑ ูุธุงู ุฅุฏุงุฑุฉ ุงูุฃุฏูุงุฑ:", error);
    throw error;
  }
}