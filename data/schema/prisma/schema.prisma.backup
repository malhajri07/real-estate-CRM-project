generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "real_estate_crm"]
}

model User {
  id                String             @id @default(cuid())
  username          String             @unique
  email             String?            @unique
  phone             String?            @unique
  firstName         String
  lastName          String
  passwordHash      String
  roles             String
  organizationId    String?
  isActive          Boolean            @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  agentProfile      AgentProfile?
  auditLogs         AuditLog[]
  buyerRequests     BuyerRequest[]
  claims            Claim[]
  contactLogs       ContactLog[]
  fileAssets        FileAsset[]
  leads             Lead[]
  listings          Listing[]
  properties        Property[]
  sellerSubmissions SellerSubmission[]
  marketingRequests MarketingRequest[] @relation("MarketingRequestOwner")
  marketingProposals MarketingProposal[] @relation("MarketingProposalAgent")
  organization      Organization?      @relation(fields: [organizationId], references: [id])

  @@index([email])
  @@index([organizationId])
  @@index([isActive])
  @@map("users")
}

model Organization {
  id            String             @id @default(cuid())
  legalName     String
  tradeName     String
  licenseNo     String             @unique
  status        OrganizationStatus @default(PENDING_VERIFICATION)
  address       String?
  phone         String?
  email         String?
  website       String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  agentProfiles AgentProfile[]
  fileAssets    FileAsset[]
  listings      Listing[]
  properties    Property[]
  users         User[]

  @@index([licenseNo])
  @@index([status])
  @@map("organizations")
}

model AgentProfile {
  id                String        @id @default(cuid())
  userId            String        @unique
  organizationId    String?
  licenseNo         String        @unique
  licenseValidTo    DateTime
  territories       String
  isIndividualAgent Boolean       @default(false)
  status            AgentStatus   @default(PENDING_VERIFICATION)
  specialties       String
  experience        Int?
  bio               String?
  avatar            String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  organization      Organization? @relation(fields: [organizationId], references: [id])
  user              User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([organizationId])
  @@index([licenseNo])
  @@index([status])
  @@map("agent_profiles")
}

model Region {
  id              Int        @id
  code            String?
  nameAr          String
  nameEn          String
  population      Int?
  centerLatitude  Decimal?
  centerLongitude Decimal?
  boundary        Json?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  cities          City[]
  districts       District[]
  properties      Property[] @relation("RegionProperties")

  @@index([nameEn])
  @@index([nameAr])
  @@index([centerLatitude, centerLongitude])
  @@map("regions")
}

model City {
  id              Int        @id
  regionId        Int
  nameAr          String
  nameEn          String
  centerLatitude  Decimal?
  centerLongitude Decimal?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  region          Region     @relation(fields: [regionId], references: [id])
  districts       District[]
  properties      Property[] @relation("CityProperties")

  @@index([regionId])
  @@index([nameEn])
  @@index([nameAr])
  @@index([centerLatitude, centerLongitude])
  @@map("cities")
}

model District {
  id         BigInt     @id
  regionId   Int
  cityId     Int
  nameAr     String
  nameEn     String
  boundary   Json?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  region     Region     @relation(fields: [regionId], references: [id])
  city       City       @relation(fields: [cityId], references: [id])
  properties Property[] @relation("DistrictProperties")

  @@index([regionId])
  @@index([cityId])
  @@index([nameEn])
  @@index([nameAr])
  @@map("districts")
}

model Property {
  id             String         @id @default(cuid())
  agentId        String
  organizationId String?
  regionId       Int?
  cityId         Int?
  districtId     BigInt?
  title          String
  description    String
  type           String
  category       String
  city           String
  district       String?
  address        String
  bedrooms       Int?
  bathrooms      Decimal?
  areaSqm        Decimal?
  price          Decimal
  status         PropertyStatus @default(ACTIVE)
  visibility     String         @default("public")
  latitude       Decimal?
  longitude      Decimal?
  features       String
  photos         String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  listings       Listing[]
  marketingRequests MarketingRequest[] @relation("MarketingRequestProperty")
  agent          User           @relation(fields: [agentId], references: [id])
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  region         Region?        @relation("RegionProperties", fields: [regionId], references: [id])
  cityRef        City?          @relation("CityProperties", fields: [cityId], references: [id])
  districtRef    District?      @relation("DistrictProperties", fields: [districtId], references: [id])

  @@index([agentId])
  @@index([organizationId])
  @@index([regionId])
  @@index([cityId])
  @@index([districtId])
  @@index([city])
  @@index([status])
  @@index([type])
  @@index([price])
  @@index([latitude, longitude])
  @@map("properties")
}

model Listing {
  id             String        @id @default(cuid())
  propertyId     String
  agentId        String
  organizationId String?
  listingType    ListingType
  exclusive      Boolean       @default(false)
  publishedAt    DateTime?
  status         ListingStatus @default(ACTIVE)
  price          Decimal?
  description    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  agent          User          @relation(fields: [agentId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  property       Property      @relation(fields: [propertyId], references: [id])

  @@index([propertyId])
  @@index([agentId])
  @@index([organizationId])
  @@index([status])
  @@index([listingType])
  @@map("listings")
}

model LandingSection {
  id             String   @id @default(uuid())
  slug           String   @unique
  title          String
  subtitle       String?
  layoutVariant  String
  theme          Json?
  orderIndex     Int       @default(0)
  visible        Boolean   @default(true)
  status         String    @default("draft")
  draftJson      Json?
  publishedJson  Json?
  version        Int       @default(1)
  updatedBy      String?
  publishedBy    String?
  updatedAt      DateTime  @updatedAt
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  cards          LandingCard[]

  @@map("landing_sections")
  @@index([status])
  @@index([orderIndex])
}

model LandingCard {
  id            String          @id @default(uuid())
  sectionId     String
  orderIndex    Int             @default(0)
  title         String?
  body          String?
  mediaUrl      String?
  icon          String?
  ctaLabel      String?
  ctaHref       String?
  visible       Boolean         @default(true)
  status        String          @default("draft")
  draftJson     Json?
  publishedJson Json?
  version       Int             @default(1)
  updatedBy     String?
  publishedBy   String?
  updatedAt     DateTime        @updatedAt
  publishedAt   DateTime?
  createdAt     DateTime        @default(now())
  section       LandingSection  @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@map("landing_cards")
  @@index([sectionId])
  @@index([status])
  @@index([orderIndex])
}

model LandingAuditLog {
  id          BigInt   @id @default(autoincrement())
  actor       String
  entityType  String
  entityId    String
  action      String
  fromVersion Int?
  toVersion   Int?
  createdAt   DateTime @default(now())

  @@map("landing_audit_log")
  @@index([entityType, entityId])
}

model LandingVersion {
  id         BigInt   @id @default(autoincrement())
  entityType String
  entityId   String
  version    Int
  snapshot   Json
  createdBy  String?
  createdAt  DateTime @default(now())

  @@map("landing_versions")
  @@index([entityType, entityId])
  @@unique([entityType, entityId, version])
}

model BuyerRequest {
  id                 String             @id @default(cuid())
  createdByUserId    String
  city               String
  type               String
  minBedrooms        Int?
  maxBedrooms        Int?
  minPrice           Decimal?
  maxPrice           Decimal?
  contactPreferences String
  status             BuyerRequestStatus @default(OPEN)
  maskedContact      String
  fullContactJson    String
  multiAgentAllowed  Boolean            @default(false)
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  createdBy          User               @relation(fields: [createdByUserId], references: [id])
  claims             Claim[]
  leads              Lead[]

  @@index([createdByUserId])
  @@index([city])
  @@index([status])
  @@index([type])
  @@index([maxPrice])
  @@map("buyer_requests")
}

model SellerSubmission {
  id                  String                 @id @default(cuid())
  createdByUserId     String
  city                String
  type                String
  bedrooms            Int?
  priceExpectation    Decimal?
  exclusivePreference Boolean                @default(false)
  status              SellerSubmissionStatus @default(OPEN)
  maskedContact       String
  fullContactJson     String
  notes               String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  leads               Lead[]
  createdBy           User                   @relation(fields: [createdByUserId], references: [id])

  @@index([createdByUserId])
  @@index([city])
  @@index([status])
  @@index([type])
  @@map("seller_submissions")
}

model MarketingRequest {
  id                 String                   @id @default(cuid())
  ownerId            String
  title              String
  summary            String
  requirements       String?
  propertyType       String
  listingType        String?
  city               String
  district           String?
  region             String?
  budgetMin          Decimal?
  budgetMax          Decimal?
  preferredStartDate DateTime?
  preferredEndDate   DateTime?
  commissionExpectation Decimal?
  seriousnessTier    MarketingRequestTier     @default(STANDARD)
  status             MarketingRequestStatus   @default(PENDING_REVIEW)
  moderationNotes    String?
  approvedAt         DateTime?
  awardedProposalId  String?
  closedAt           DateTime?
  contactName        String
  contactPhone       String?
  contactEmail       String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  propertyId         String?

  owner    User      @relation("MarketingRequestOwner", fields: [ownerId], references: [id])
  property Property? @relation("MarketingRequestProperty", fields: [propertyId], references: [id])
  proposals MarketingProposal[]

  @@index([ownerId])
  @@index([city])
  @@index([status])
  @@index([seriousnessTier])
  @@map("marketing_requests")
}

model MarketingProposal {
  id             String                   @id @default(cuid())
  requestId      String
  agentId        String
  message        String?
  commissionRate Decimal?
  marketingBudget Decimal?
  estimatedTimeline String?
  status         MarketingProposalStatus    @default(PENDING)
  submittedAt    DateTime                   @default(now())
  decidedAt      DateTime?
  attachments    String?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt

  request MarketingRequest @relation(fields: [requestId], references: [id])
  agent   User             @relation("MarketingProposalAgent", fields: [agentId], references: [id])

  @@index([requestId])
  @@index([agentId])
  @@index([status])
  @@map("marketing_proposals")
}

model PropertySeeker {
  seekerNum           BigInt   @id @default(autoincrement()) @map("seeker_num")
  seekerId            String   @map("seeker_id") @default(dbgenerated("'S-' || lpad(seeker_num::text, 11, '0')"))
  firstName           String   @map("first_name")
  lastName            String   @map("last_name")
  mobileNumber        String   @map("mobile_number")
  email               String   @map("email")
  nationality         String   @map("nationality")
  age                 Int      @map("age")
  monthlyIncome       Decimal  @map("monthly_income")
  gender              String   @map("gender")
  typeOfProperty      String   @map("type_of_property")
  typeOfContract      String   @map("type_of_contract")
  numberOfRooms       Int      @map("number_of_rooms")
  numberOfBathrooms   Int      @map("number_of_bathrooms")
  numberOfLivingRooms Int      @map("number_of_living_rooms")
  houseDirection      String?  @map("house_direction")
  budgetSize          Decimal  @map("budget_size")
  hasMaidRoom         Boolean  @default(false) @map("has_maid_room")
  hasDriverRoom       Boolean? @default(false) @map("has_driver_room")
  kitchenInstalled    Boolean? @default(false) @map("kitchen_installed")
  hasElevator         Boolean? @default(false) @map("has_elevator")
  parkingAvailable    Boolean? @default(false) @map("parking_available")
  city                String?  @map("city")
  district            String?  @map("district")
  region              String?  @map("region")
  otherComments       String?  @map("other_comments")
  sqm                 BigInt?  @map("Sqm")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([email, mobileNumber], name: "uniq_properties_seeker_email_mobile")
  @@unique([seekerId])
  @@index([city])
  @@index([city, district])
  @@index([region])
  @@index([typeOfProperty, typeOfContract])
  @@map("properties_seeker")
}

model Lead {
  id                 String            @id @default(cuid())
  agentId            String
  buyerRequestId     String?
  sellerSubmissionId String?
  status             LeadStatus        @default(NEW)
  notes              String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  contactLogs        ContactLog[]
  agent              User              @relation(fields: [agentId], references: [id])
  buyerRequest       BuyerRequest?     @relation(fields: [buyerRequestId], references: [id])
  sellerSubmission   SellerSubmission? @relation(fields: [sellerSubmissionId], references: [id])

  @@index([agentId])
  @@index([buyerRequestId])
  @@index([sellerSubmissionId])
  @@index([status])
  @@map("leads")
}

model Claim {
  id             String       @id @default(cuid())
  agentId        String
  buyerRequestId String
  claimedAt      DateTime     @default(now())
  expiresAt      DateTime
  status         ClaimStatus  @default(ACTIVE)
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  agent          User         @relation(fields: [agentId], references: [id])
  buyerRequest   BuyerRequest @relation(fields: [buyerRequestId], references: [id])

  @@index([agentId])
  @@index([buyerRequestId])
  @@index([status])
  @@index([expiresAt])
  @@map("claims")
}

model ContactLog {
  id          String         @id @default(cuid())
  leadId      String
  agentId     String
  note        String
  channel     ContactChannel
  contactedAt DateTime       @default(now())
  createdAt   DateTime       @default(now())
  agent       User           @relation(fields: [agentId], references: [id])
  lead        Lead           @relation(fields: [leadId], references: [id])

  @@index([leadId])
  @@index([agentId])
  @@index([contactedAt])
  @@map("contact_logs")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  entity     String
  entityId   String
  beforeJson String?
  afterJson  String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity])
  @@index([entityId])
  @@index([createdAt])
  @@map("audit_logs")
}

/// *
///  * LandingPageContent Model - Main landing page content
///  * 
///  * Stores all content for the landing page including hero section,
///  * features, solutions, stats, pricing, contact info, and footer.
///  * This replaces the Strapi CMS with a custom database-driven solution.
model LandingPageContent {
  id                   String                   @id @default(cuid())
  createdAt            DateTime                 @default(now())
  updatedAt            DateTime                 @updatedAt
  loadingText          String                   @default("جار تحميل المحتوى...")
  heroWelcomeText      String                   @default("مرحباً بك في")
  heroTitle            String                   @default("منصة عقاراتي للوساطة العقارية")
  heroSubtitle         String                   @default("منصة شاملة لإدارة العقارات والوساطة العقارية مع أدوات تسويق متقدمة")
  heroButton           String                   @default("ابدأ رحلتك المجانية")
  heroLoginButton      String                   @default("تسجيل الدخول")
  heroDashboardTitle   String                   @default("منصة عقاراتي - لوحة التحكم")
  featuresTitle        String                   @default("لماذا تختار منصة عقاراتي؟")
  featuresDescription  String                   @default("عندما يجتمع التحديث بالاحترافية، تكون منصة عقاراتي هي الخيار الأمثل لإدارة عقاراتك بكفاءة")
  solutionsTitle       String                   @default("حلول شاملة لإدارة العقارات")
  solutionsDescription String                   @default("أدوات متكاملة تساعدك في إدارة جميع جوانب أعمالك العقارية")
  statsTitle           String                   @default("أرقامنا تتحدث")
  pricingTitle         String                   @default("خطط الأسعار")
  pricingSubtitle      String                   @default("اختر الخطة المناسبة لك")
  contactTitle         String                   @default("تواصل معنا")
  contactDescription   String                   @default("نحن هنا لمساعدتك في رحلتك العقارية")
  footerDescription    String                   @default("منصة عقاراتي - الحل الشامل لإدارة العقارات والوساطة العقارية")
  footerCopyright      String                   @default("© 2024 منصة عقاراتي. جميع الحقوق محفوظة.")
  contactInfo          LandingPageContactInfo[]
  features             LandingPageFeature[]
  footerLinks          LandingPageFooterLink[]
  heroDashboardMetrics LandingPageHeroMetric[]
  navigation           LandingPageNavigation[]
  solutions            LandingPageSolution[]
  stats                LandingPageStat[]

  @@map("landing_page_content")
}

/// *
///  * LandingPageFeature Model - Features section items
model LandingPageFeature {
  id                   String             @id @default(cuid())
  title                String
  description          String
  icon                 String
  order                Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  landingPageContentId String
  landingPageContent   LandingPageContent @relation(fields: [landingPageContentId], references: [id], onDelete: Cascade)

  @@map("landing_page_features")
}

/// *
///  * LandingPageStat Model - Statistics section items
model LandingPageStat {
  id                   String             @id @default(cuid())
  number               String
  label                String
  suffix               String?
  order                Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  landingPageContentId String
  landingPageContent   LandingPageContent @relation(fields: [landingPageContentId], references: [id], onDelete: Cascade)

  @@map("landing_page_stats")
}

/// *
///  * LandingPageSolution Model - Solutions section items
model LandingPageSolution {
  id                   String                       @id @default(cuid())
  title                String
  description          String
  icon                 String
  order                Int                          @default(0)
  createdAt            DateTime                     @default(now())
  updatedAt            DateTime                     @updatedAt
  landingPageContentId String
  features             LandingPageSolutionFeature[]
  landingPageContent   LandingPageContent           @relation(fields: [landingPageContentId], references: [id], onDelete: Cascade)

  @@map("landing_page_solutions")
}

/// *
///  * LandingPageSolutionFeature Model - Features within solutions
model LandingPageSolutionFeature {
  id         String              @id @default(cuid())
  text       String
  icon       String
  order      Int                 @default(0)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  solutionId String
  solution   LandingPageSolution @relation(fields: [solutionId], references: [id], onDelete: Cascade)

  @@map("landing_page_solution_features")
}

/// *
///  * LandingPageHeroMetric Model - Hero dashboard metrics
model LandingPageHeroMetric {
  id                   String             @id @default(cuid())
  value                String
  label                String
  color                String
  order                Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  landingPageContentId String
  landingPageContent   LandingPageContent @relation(fields: [landingPageContentId], references: [id], onDelete: Cascade)

  @@map("landing_page_hero_metrics")
}

/// *
///  * LandingPageContactInfo Model - Contact information items
model LandingPageContactInfo {
  id                   String             @id @default(cuid())
  type                 String
  label                String
  value                String
  icon                 String
  order                Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  landingPageContentId String
  landingPageContent   LandingPageContent @relation(fields: [landingPageContentId], references: [id], onDelete: Cascade)

  @@map("landing_page_contact_info")
}

/// *
///  * LandingPageFooterLink Model - Footer navigation links
model LandingPageFooterLink {
  id                   String             @id @default(cuid())
  text                 String
  url                  String
  category             String
  order                Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  landingPageContentId String
  landingPageContent   LandingPageContent @relation(fields: [landingPageContentId], references: [id], onDelete: Cascade)

  @@map("landing_page_footer_links")
}

/// *
///  * LandingPageNavigation Model - Main navigation items
model LandingPageNavigation {
  id                   String             @id @default(cuid())
  text                 String
  url                  String
  order                Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  landingPageContentId String
  landingPageContent   LandingPageContent @relation(fields: [landingPageContentId], references: [id], onDelete: Cascade)

  @@map("landing_page_navigation")
}

/// *
///  * PricingPlan Model - Pricing plans for the platform
model PricingPlan {
  id          String               @id @default(cuid())
  name        String
  price       Float
  period      String               @default("monthly")
  isPopular   Boolean              @default(false)
  description String
  buttonText  String               @default("ابدأ الآن")
  order       Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  features    PricingPlanFeature[]

  @@map("pricing_plans")
}

/// *
///  * PricingPlanFeature Model - Features within pricing plans
model PricingPlanFeature {
  id            String      @id @default(cuid())
  text          String
  included      Boolean     @default(true)
  order         Int         @default(0)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  pricingPlanId String
  pricingPlan   PricingPlan @relation(fields: [pricingPlanId], references: [id], onDelete: Cascade)

  @@map("pricing_plan_features")
}

model FileAsset {
  id             String        @id @default(cuid())
  ownerUserId    String?
  organizationId String?
  entity         String
  entityId       String
  url            String
  mime           String
  size           Int
  filename       String
  createdAt      DateTime      @default(now())
  organization   Organization? @relation(fields: [organizationId], references: [id])
  owner          User?         @relation(fields: [ownerUserId], references: [id])

  @@index([ownerUserId])
  @@index([organizationId])
  @@index([entity])
  @@index([entityId])
  @@map("file_assets")
}

/// Account table imported from CSV (data/raw-assets/real_estate_users_500_clean.csv)
model Account {
  id            String    @id @default(cuid())
  firstNameAr   String?
  lastNameAr    String?
  roleType      String?
  accountIdType String?
  accountNumber String    @unique
  parentAccount String?
  usernameEn    String?
  mobile        String?
  createDate    DateTime?
  expiryDate    DateTime?
  status        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("accounts")
}

/// *
///  * UserRole Enum - Role-Based Access Control (RBAC)
///  * 
///  * Defines the 6 user roles in the system:
///  * - WEBSITE_ADMIN: Platform owner with full system access
///  * - CORP_OWNER: Corporate account owner/manager
///  * - CORP_AGENT: Licensed agent under a corporate organization
///  * - INDIV_AGENT: Licensed independent agent (no corporate affiliation)
///  * - SELLER: Individual customer selling property
///  * - BUYER: Individual customer looking to buy property
///  * 
///  * Used in: Authentication, authorization, UI routing, data access control
///  * Pages affected: All pages with role-based access, RBAC dashboard, user management
enum UserRole {
  WEBSITE_ADMIN
  CORP_OWNER
  CORP_AGENT
  INDIV_AGENT
  SELLER
  BUYER
}

/// *
///  * OrganizationStatus Enum - Corporate Organization States
///  * 
///  * Defines the status of corporate organizations:
///  * - ACTIVE: Fully operational organization
///  * - SUSPENDED: Temporarily disabled organization
///  * - PENDING_VERIFICATION: Awaiting verification/approval
///  * 
///  * Used in: Organization management, access control, billing
///  * Pages affected: Agency management, organization settings, admin panel
enum OrganizationStatus {
  ACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

/// *
///  * AgentStatus Enum - Agent Account States
///  * 
///  * Defines the status of agent accounts:
///  * - ACTIVE: Fully operational agent
///  * - INACTIVE: Temporarily disabled agent
///  * - SUSPENDED: Suspended agent account
///  * - PENDING_VERIFICATION: Awaiting license verification
///  * 
///  * Used in: Agent management, access control, lead assignment
///  * Pages affected: Agent profiles, agent management, lead assignment
enum AgentStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

/// *
///  * PropertyStatus Enum - Property States
///  * 
///  * Defines the status of properties:
///  * - ACTIVE: Available for sale/rent
///  * - INACTIVE: Temporarily unavailable
///  * - SOLD: Property has been sold
///  * - RENTED: Property has been rented
///  * - PENDING_APPROVAL: Awaiting approval for listing
///  * 
///  * Used in: Property management, listing visibility, search filters
///  * Pages affected: Property listings, property detail, property management
enum PropertyStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  PENDING_APPROVAL
}

/// *
///  * ListingType Enum - Property Listing Types
///  * 
///  * Defines the type of property listing:
///  * - RENT: Property available for rent
///  * - SALE: Property available for sale
///  * 
///  * Used in: Property search, listing management, pricing
///  * Pages affected: Property search, listing creation, property filters
enum ListingType {
  RENT
  SALE
}

/// *
///  * ListingStatus Enum - Listing States
///  * 
///  * Defines the status of property listings:
///  * - ACTIVE: Listing is live and visible
///  * - INACTIVE: Listing is hidden
///  * - EXPIRED: Listing has expired
///  * - PENDING_APPROVAL: Awaiting approval
///  * 
///  * Used in: Listing management, visibility control, moderation
///  * Pages affected: Listing management, moderation queue, listing visibility
enum ListingStatus {
  ACTIVE
  INACTIVE
  SOLD
  RENTED
  PENDING_APPROVAL
}

enum BuyerRequestStatus {
  OPEN
  CLAIMED
  CLOSED
  PAUSED
}

enum SellerSubmissionStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  PAUSED
}

enum MarketingRequestStatus {
  DRAFT
  PENDING_REVIEW
  OPEN
  AWARDED
  CLOSED
  REJECTED
}

enum MarketingProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
  WITHDRAWN
  EXPIRED
}

enum MarketingRequestTier {
  STANDARD
  SERIOUS
  ENTERPRISE
}

enum LeadStatus {
  NEW
  IN_PROGRESS
  WON
  LOST
}

enum ClaimStatus {
  ACTIVE
  EXPIRED
  RELEASED
  CONVERTED
}

enum ContactChannel {
  PHONE
  EMAIL
  WHATSAPP
  SMS
  IN_PERSON
}
